From 5d4dfae775688dff3be2de55012dca36392249f1 Mon Sep 17 00:00:00 2001
From: Jamie Perkins <jamie.perkins@gmail.com>
Date: Fri, 8 Sep 2017 08:50:44 -0600
Subject: [PATCH] increment version, move demo js into separate file

---
 countUp.js          |  19 ++--
 demo.js             | 246 +++++++++++++++++++++++++++++++++++++++++++++++++++
 dist/countUp.js     |  19 ++--
 dist/countUp.min.js |   2 +-
 index.html          | 248 +---------------------------------------------------
 package.json        |   2 +-
 6 files changed, 267 insertions(+), 269 deletions(-)
 create mode 100644 demo.js

diff --git a/countUp.js b/countUp.js
index d941585..74982d6 100644
--- a/countUp.js
+++ b/countUp.js
@@ -15,7 +15,7 @@
 var CountUp = function(target, startVal, endVal, decimals, duration, options) {
 
 	var self = this;
-	self.version = function () { return '1.9.1'; };
+	self.version = function () { return '1.9.2'; };
 	
 	// default options
 	self.options = {
@@ -41,7 +41,8 @@ var CountUp = function(target, startVal, endVal, decimals, duration, options) {
 
 	if (self.options.separator === '') {
 		self.options.useGrouping = false;
-	} else {
+	}
+	else {
 		// ensure the separator is a string (formatNumber assumes this)
 		self.options.separator = '' + self.options.separator;
 	}
@@ -53,15 +54,13 @@ var CountUp = function(target, startVal, endVal, decimals, duration, options) {
 	var vendors = ['webkit', 'moz', 'ms', 'o'];
 	for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
 		window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
-		window.cancelAnimationFrame =
-			window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
+		window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
 	}
 	if (!window.requestAnimationFrame) {
 		window.requestAnimationFrame = function(callback, element) {
 			var currTime = new Date().getTime();
 			var timeToCall = Math.max(0, 16 - (currTime - lastTime));
-			var id = window.setTimeout(function() { callback(currTime + timeToCall); },
-				timeToCall);
+			var id = window.setTimeout(function() { callback(currTime + timeToCall); }, timeToCall);
 			lastTime = currTime + timeToCall;
 			return id;
 		};
@@ -92,11 +91,11 @@ var CountUp = function(target, startVal, endVal, decimals, duration, options) {
 		// optional numeral substitution
 		if (self.options.numerals.length) {
 			x1 = x1.replace(/[0-9]/g, function(w) {
-								return self.options.numerals[+w];
-						})
+				return self.options.numerals[+w];
+			})
 			x2 = x2.replace(/[0-9]/g, function(w) {
-								return self.options.numerals[+w];
-						})
+				return self.options.numerals[+w];
+			})
 		}
 		return self.options.prefix + x1 + x2 + self.options.suffix;
 	}
diff --git a/demo.js b/demo.js
new file mode 100644
index 0000000..d803bfc
--- /dev/null
+++ b/demo.js
@@ -0,0 +1,246 @@
+/*
+	demo.js
+
+	Only used for the countUp demo page, not a dependency
+*/
+
+var demo, options, code, data, stars, easingFunctions,
+	useOnComplete = false,
+	useEasing = true,
+	easingFn = null,
+	useGrouping = true;
+
+window.onload = function() {
+
+	var codeVisualizer = codeVisualizer,
+		easingFnsDropdown = document.getElementById('easingFnsDropdown'),
+		errorSection = document.getElementById('errorSection');
+
+	// setup CountUp object - last 3 params (decimals, duration, options) are optional
+	demo = new CountUp('myTargetElement', 0, 100, 0, 2.5, options);
+	// you could do demo.start() right here but we are getting actual current star count from github api below
+	// since it is an asynchronous call, we fire start() in the success fn of the XMLHttpRequest object
+	getStars.send();
+	// display version
+	document.getElementById('version').innerHTML = 'v'+demo.version();
+};
+
+easingFunctions = {
+	easeOutExpo: function(t, b, c, d) {
+		return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;
+	},
+	outQuintic: function(t, b, c, d) {
+		var ts = (t /= d) * t;
+		var tc = ts * t;
+		return b + c * (tc * ts + -5 * ts * ts + 10 * tc + -10 * ts + 5 * t);
+	},
+	outCubic: function(t, b, c, d) {
+		var ts = (t /= d) * t;
+		var tc = ts * t;
+		return b + c * (tc + -3 * ts + 3 * t);
+	}
+};
+
+// for demo:
+function swapValues() {
+	var oldStartVal = document.getElementById('startVal').value;
+	var oldEndVal = document.getElementById('endVal').value;
+	document.getElementById('startVal').value = oldEndVal;
+	document.getElementById('endVal').value = oldStartVal;
+	updateCodeVisualizer();
+}
+function getEasingFn() {
+	var fn = easingFnsDropdown.value;
+	if (fn === 'easeOutExpo') return null;
+	if (typeof easingFunctions[fn] === 'undefined') return undefined;
+
+	return easingFunctions[fn];
+}
+function getEasingFnBody(fn) {
+	fn = typeof fn === 'undefined' ? getEasingFn() : fn;
+
+	if (typeof fn === 'undefined') return 'undefined function';
+
+	if (fn !== null) {
+		return fn.toString().replace(/^ {8}/gm, '');
+	}
+
+	return '';
+}
+function getNumerals() {
+	var numeralsCode = document.getElementById('numeralsDropdown').value;
+	// optionally provide alternates for 0-9
+	switch (numeralsCode) {
+		case 'ea': // Eastern Arabic
+			return ['٠','١','٢','٣','٤','٥','٦','٧','٨','٩'];
+		case 'fa': // Farsi
+			return ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];
+		default:
+			return []
+	}
+}
+function stringifyArray(arr) {
+	return '[\'' + arr.join('\', \'') + '\']';
+
+}
+function createCountUp() {
+
+	var startVal = document.getElementById('startVal').value;
+	var endVal = document.getElementById('endVal').value;
+	var decimals = document.getElementById('decimals').value,
+		duration = document.getElementById('duration').value,
+		prefix = document.getElementById('prefix').value,
+		suffix = document.getElementById('suffix').value,
+		easingFn = getEasingFn();
+
+	options = {
+		useEasing: useEasing,
+		easingFn: typeof easingFn === 'undefined' ? null : easingFn,
+		useGrouping: useGrouping,
+		separator: document.getElementById('separator').value,
+		decimal: document.getElementById('decimal').value,
+		numerals: getNumerals()
+	};
+	if (prefix.length) options.prefix = prefix;
+	if (suffix.length) options.suffix = suffix;
+
+	// you don't have to create a new instance of CountUp every time you start an animation,
+	// you can just change the properties individually. But I do here in case user changes values in demo.
+	demo = new CountUp('myTargetElement', startVal, endVal, decimals, duration, options);
+	if (!demo.error) {
+		errorSection.style.display = 'none';
+		if (useOnComplete) {
+			demo.start(methodToCallOnComplete);
+		} else {
+			demo.start();
+		}
+		updateCodeVisualizer();
+	}
+	else {
+		errorSection.style.display = 'block';
+		document.getElementById('error').innerHTML = demo.error;
+		console.error(demo.error);
+	}
+}
+function showCodeAndPauseResume() {
+	code = 'demo.pauseResume();';
+	codeVisualizer.innerHTML = code;
+	demo.pauseResume();
+}
+function showCodeAndReset() {
+	code = 'demo.reset();';
+	codeVisualizer.innerHTML = code;
+	demo.reset();
+}
+function showCodeAndUpdate() {
+	var updateVal = document.getElementById('updateVal').value;
+	var num = updateVal ? updateVal : 0;
+	code = 'demo.update('+num+');<br>';
+	code += '// update method is useful for counting to large numbers. See README.';
+	codeVisualizer.innerHTML = code;
+	demo.update(num);
+}
+function toggleOnComplete(checkbox) {
+	useOnComplete = checkbox.checked;
+	updateCodeVisualizer();
+}
+function toggleEasing(checkbox) {
+	useEasing = checkbox.checked
+	easingFnsDropdown.disabled = !useEasing
+	if (useEasing) {
+		easingFnsDropdown.value = 'easeOutExpo';
+		document.getElementById('easingFnPreview').value = "";
+	} 
+	updateCodeVisualizer();
+}
+function toggleGrouping(checkbox) {
+	useGrouping = checkbox.checked;
+	updateCodeVisualizer();
+}
+function methodToCallOnComplete() {
+	console.log('COMPLETE!');
+	alert('COMPLETE!');
+}
+function updateCodeVisualizer() {
+	var startVal = document.getElementById('startVal').value;
+	startVal = Number(startVal.replace(',','').replace(' ',''));
+	var endVal = document.getElementById('endVal').value;
+	endVal = Number(endVal.replace(',','').replace(' ',''));
+	var decimals = document.getElementById('decimals').value,
+		duration = document.getElementById('duration').value,
+		separator = document.getElementById('separator').value,
+		decimal = document.getElementById('decimal').value,
+		prefix = document.getElementById('prefix').value,
+		suffix = document.getElementById('suffix').value,
+		easingFn = getEasingFn(),
+		easingFnBody = getEasingFnBody(easingFn),
+		numerals = getNumerals(),
+		code = '';
+
+	if (useEasing && easingFn) {
+		code += 'var easingFn = ';
+		var split = easingFnBody.split('\n');
+
+		for (var line in split) {
+			code += split[line].replace(' ', '&nbsp;') + '<br>';
+		}
+	}
+
+	code += 'var options = {<br>';
+	code += (useEasing) ? '&emsp;&emsp;useEasing: true, <br>' : '&emsp;&emsp;useEasing: false, <br>';
+	code += (easingFn && useEasing) ? '&emsp;&emsp;easingFn: easingFn, <br>' : '';
+	code += (useGrouping) ? '&emsp;&emsp;useGrouping: true, <br>' : '&emsp;&emsp;useGrouping: false, <br>';
+	code += '&emsp;&emsp;separator: \''+separator+'\', <br>';
+	code += '&emsp;&emsp;decimal: \''+decimal+'\', <br>';
+	if (prefix.length) code += '&emsp;&emsp;prefix: \''+prefix+'\', <br>';
+	if (suffix.length) code += '&emsp;&emsp;suffix: \''+suffix+'\' <br>';
+	if (numerals.length) code += '&emsp;&emsp;numerals: '+stringifyArray(numerals)+' <br>';
+	code += '};<br>';
+	code += 'var demo = new CountUp(\'myTargetElement\', '+startVal+', '+endVal+', '+decimals+', '+duration+', options);<br>';
+	code += 'if (!demo.error) {<br>';
+	if (useOnComplete) {
+		code += '&emsp;&emsp;demo.start(methodToCallOnComplete);<br>';
+	} else {
+		code += '&emsp;&emsp;demo.start();<br>';
+	}
+	code += '} else {<br>';
+	code += '&emsp;&emsp;console.error(demo.error);<br>}';
+	codeVisualizer.innerHTML = code;
+}
+function updateCodeVisualizerForUpdate() {
+	var updateVal = document.getElementById('updateVal').value;
+	var num = updateVal ? updateVal : 0;
+	code = 'demo.update(' + updateVal + ');';
+	codeVisualizer.innerHTML = code;
+}
+
+// get current star count
+var repoInfoUrl = 'https://api.github.com/repos/inorganik/CountUp.js';
+var getStars = new XMLHttpRequest();
+getStars.open('GET', repoInfoUrl, true);
+getStars.timeout = 5000;
+
+getStars.onreadystatechange = function() {
+	// 2: received headers,  3: loading, 4: done
+	if (getStars.readyState == 4) {
+		if (getStars.status == 200) {
+			if (getStars.responseText !== 'undefined') {
+				if (getStars.responseText.length > 0) {
+					data = JSON.parse(getStars.responseText);
+					stars = data.stargazers_count;
+					// change input values
+					document.getElementById('startVal').value = 0;
+					document.getElementById('endVal').value = stars;
+					document.getElementById('decimals').value = 0;
+					
+					createCountUp();
+				}
+			}
+		}
+	}
+};
+getStars.onerror = function() {
+	console.error('error getting stars:', getStars.status);
+	stars = getStars.status;
+	demo.start();
+};
\ No newline at end of file
diff --git a/dist/countUp.js b/dist/countUp.js
index 5bc454c..5a14f8c 100644
--- a/dist/countUp.js
+++ b/dist/countUp.js
@@ -26,7 +26,7 @@
 var CountUp = function(target, startVal, endVal, decimals, duration, options) {
 
 	var self = this;
-	self.version = function () { return '1.9.1'; };
+	self.version = function () { return '1.9.2'; };
 	
 	// default options
 	self.options = {
@@ -52,7 +52,8 @@ var CountUp = function(target, startVal, endVal, decimals, duration, options) {
 
 	if (self.options.separator === '') {
 		self.options.useGrouping = false;
-	} else {
+	}
+	else {
 		// ensure the separator is a string (formatNumber assumes this)
 		self.options.separator = '' + self.options.separator;
 	}
@@ -64,15 +65,13 @@ var CountUp = function(target, startVal, endVal, decimals, duration, options) {
 	var vendors = ['webkit', 'moz', 'ms', 'o'];
 	for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
 		window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
-		window.cancelAnimationFrame =
-			window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
+		window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
 	}
 	if (!window.requestAnimationFrame) {
 		window.requestAnimationFrame = function(callback, element) {
 			var currTime = new Date().getTime();
 			var timeToCall = Math.max(0, 16 - (currTime - lastTime));
-			var id = window.setTimeout(function() { callback(currTime + timeToCall); },
-				timeToCall);
+			var id = window.setTimeout(function() { callback(currTime + timeToCall); }, timeToCall);
 			lastTime = currTime + timeToCall;
 			return id;
 		};
@@ -103,11 +102,11 @@ var CountUp = function(target, startVal, endVal, decimals, duration, options) {
 		// optional numeral substitution
 		if (self.options.numerals.length) {
 			x1 = x1.replace(/[0-9]/g, function(w) {
-								return self.options.numerals[+w];
-						})
+				return self.options.numerals[+w];
+			})
 			x2 = x2.replace(/[0-9]/g, function(w) {
-								return self.options.numerals[+w];
-						})
+				return self.options.numerals[+w];
+			})
 		}
 		return self.options.prefix + x1 + x2 + self.options.suffix;
 	}
diff --git a/dist/countUp.min.js b/dist/countUp.min.js
index a001127..a5da806 100644
--- a/dist/countUp.min.js
+++ b/dist/countUp.min.js
@@ -1 +1 @@
-!function(a,n){"function"==typeof define&&define.amd?define(n):"object"==typeof exports?module.exports=n(require,exports,module):a.CountUp=n()}(this,function(a,n,t){var e=function(a,n,t,e,i,r){function o(a){a=a.toFixed(l.decimals),a+="";var n,t,e,i,r,o;if(n=a.split("."),t=n[0],e=n.length>1?l.options.decimal+n[1]:"",l.options.useGrouping){for(i="",r=0,o=t.length;r<o;++r)0!==r&&r%3===0&&(i=l.options.separator+i),i=t[o-r-1]+i;t=i}return l.options.numerals.length&&(t=t.replace(/[0-9]/g,function(a){return l.options.numerals[+a]}),e=e.replace(/[0-9]/g,function(a){return l.options.numerals[+a]})),l.options.prefix+t+e+l.options.suffix}function u(a,n,t,e){return t*(-Math.pow(2,-10*a/e)+1)*1024/1023+n}function s(a){return"number"==typeof a&&!isNaN(a)}var l=this;if(l.version=function(){return"1.9.1"},l.options={useEasing:!0,useGrouping:!0,separator:",",decimal:".",easingFn:u,formattingFn:o,prefix:"",suffix:"",numerals:[]},r&&"object"==typeof r)for(var m in l.options)r.hasOwnProperty(m)&&null!==r[m]&&(l.options[m]=r[m]);""===l.options.separator?l.options.useGrouping=!1:l.options.separator=""+l.options.separator;for(var d=0,c=["webkit","moz","ms","o"],f=0;f<c.length&&!window.requestAnimationFrame;++f)window.requestAnimationFrame=window[c[f]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[c[f]+"CancelAnimationFrame"]||window[c[f]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(a,n){var t=(new Date).getTime(),e=Math.max(0,16-(t-d)),i=window.setTimeout(function(){a(t+e)},e);return d=t+e,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(a){clearTimeout(a)}),l.initialize=function(){return!!l.initialized||(l.error="",l.d="string"==typeof a?document.getElementById(a):a,l.d?(l.startVal=Number(n),l.endVal=Number(t),s(l.startVal)&&s(l.endVal)?(l.decimals=Math.max(0,e||0),l.dec=Math.pow(10,l.decimals),l.duration=1e3*Number(i)||2e3,l.countDown=l.startVal>l.endVal,l.frameVal=l.startVal,l.initialized=!0,!0):(l.error="[CountUp] startVal ("+n+") or endVal ("+t+") is not a number",!1)):(l.error="[CountUp] target is null or undefined",!1))},l.printValue=function(a){var n=l.options.formattingFn(a);"INPUT"===l.d.tagName?this.d.value=n:"text"===l.d.tagName||"tspan"===l.d.tagName?this.d.textContent=n:this.d.innerHTML=n},l.count=function(a){l.startTime||(l.startTime=a),l.timestamp=a;var n=a-l.startTime;l.remaining=l.duration-n,l.options.useEasing?l.countDown?l.frameVal=l.startVal-l.options.easingFn(n,0,l.startVal-l.endVal,l.duration):l.frameVal=l.options.easingFn(n,l.startVal,l.endVal-l.startVal,l.duration):l.countDown?l.frameVal=l.startVal-(l.startVal-l.endVal)*(n/l.duration):l.frameVal=l.startVal+(l.endVal-l.startVal)*(n/l.duration),l.countDown?l.frameVal=l.frameVal<l.endVal?l.endVal:l.frameVal:l.frameVal=l.frameVal>l.endVal?l.endVal:l.frameVal,l.frameVal=Math.round(l.frameVal*l.dec)/l.dec,l.printValue(l.frameVal),n<l.duration?l.rAF=requestAnimationFrame(l.count):l.callback&&l.callback()},l.start=function(a){l.initialize()&&(l.callback=a,l.rAF=requestAnimationFrame(l.count))},l.pauseResume=function(){l.paused?(l.paused=!1,delete l.startTime,l.duration=l.remaining,l.startVal=l.frameVal,requestAnimationFrame(l.count)):(l.paused=!0,cancelAnimationFrame(l.rAF))},l.reset=function(){l.paused=!1,delete l.startTime,l.initialized=!1,l.initialize()&&(cancelAnimationFrame(l.rAF),l.printValue(l.startVal))},l.update=function(a){if(l.initialize()){if(a=Number(a),!s(a))return void(l.error="[CountUp] update() - new endVal is not a number: "+a);l.error="",a!==l.frameVal&&(cancelAnimationFrame(l.rAF),l.paused=!1,delete l.startTime,l.startVal=l.frameVal,l.endVal=a,l.countDown=l.startVal>l.endVal,l.rAF=requestAnimationFrame(l.count))}},l.initialize()&&l.printValue(l.startVal)};return e});
\ No newline at end of file
+!function(a,n){"function"==typeof define&&define.amd?define(n):"object"==typeof exports?module.exports=n(require,exports,module):a.CountUp=n()}(this,function(a,n,t){var e=function(a,n,t,e,i,r){function o(a){a=a.toFixed(l.decimals),a+="";var n,t,e,i,r,o;if(n=a.split("."),t=n[0],e=n.length>1?l.options.decimal+n[1]:"",l.options.useGrouping){for(i="",r=0,o=t.length;r<o;++r)0!==r&&r%3===0&&(i=l.options.separator+i),i=t[o-r-1]+i;t=i}return l.options.numerals.length&&(t=t.replace(/[0-9]/g,function(a){return l.options.numerals[+a]}),e=e.replace(/[0-9]/g,function(a){return l.options.numerals[+a]})),l.options.prefix+t+e+l.options.suffix}function u(a,n,t,e){return t*(-Math.pow(2,-10*a/e)+1)*1024/1023+n}function s(a){return"number"==typeof a&&!isNaN(a)}var l=this;if(l.version=function(){return"1.9.2"},l.options={useEasing:!0,useGrouping:!0,separator:",",decimal:".",easingFn:u,formattingFn:o,prefix:"",suffix:"",numerals:[]},r&&"object"==typeof r)for(var m in l.options)r.hasOwnProperty(m)&&null!==r[m]&&(l.options[m]=r[m]);""===l.options.separator?l.options.useGrouping=!1:l.options.separator=""+l.options.separator;for(var d=0,c=["webkit","moz","ms","o"],f=0;f<c.length&&!window.requestAnimationFrame;++f)window.requestAnimationFrame=window[c[f]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[c[f]+"CancelAnimationFrame"]||window[c[f]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(a,n){var t=(new Date).getTime(),e=Math.max(0,16-(t-d)),i=window.setTimeout(function(){a(t+e)},e);return d=t+e,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(a){clearTimeout(a)}),l.initialize=function(){return!!l.initialized||(l.error="",l.d="string"==typeof a?document.getElementById(a):a,l.d?(l.startVal=Number(n),l.endVal=Number(t),s(l.startVal)&&s(l.endVal)?(l.decimals=Math.max(0,e||0),l.dec=Math.pow(10,l.decimals),l.duration=1e3*Number(i)||2e3,l.countDown=l.startVal>l.endVal,l.frameVal=l.startVal,l.initialized=!0,!0):(l.error="[CountUp] startVal ("+n+") or endVal ("+t+") is not a number",!1)):(l.error="[CountUp] target is null or undefined",!1))},l.printValue=function(a){var n=l.options.formattingFn(a);"INPUT"===l.d.tagName?this.d.value=n:"text"===l.d.tagName||"tspan"===l.d.tagName?this.d.textContent=n:this.d.innerHTML=n},l.count=function(a){l.startTime||(l.startTime=a),l.timestamp=a;var n=a-l.startTime;l.remaining=l.duration-n,l.options.useEasing?l.countDown?l.frameVal=l.startVal-l.options.easingFn(n,0,l.startVal-l.endVal,l.duration):l.frameVal=l.options.easingFn(n,l.startVal,l.endVal-l.startVal,l.duration):l.countDown?l.frameVal=l.startVal-(l.startVal-l.endVal)*(n/l.duration):l.frameVal=l.startVal+(l.endVal-l.startVal)*(n/l.duration),l.countDown?l.frameVal=l.frameVal<l.endVal?l.endVal:l.frameVal:l.frameVal=l.frameVal>l.endVal?l.endVal:l.frameVal,l.frameVal=Math.round(l.frameVal*l.dec)/l.dec,l.printValue(l.frameVal),n<l.duration?l.rAF=requestAnimationFrame(l.count):l.callback&&l.callback()},l.start=function(a){l.initialize()&&(l.callback=a,l.rAF=requestAnimationFrame(l.count))},l.pauseResume=function(){l.paused?(l.paused=!1,delete l.startTime,l.duration=l.remaining,l.startVal=l.frameVal,requestAnimationFrame(l.count)):(l.paused=!0,cancelAnimationFrame(l.rAF))},l.reset=function(){l.paused=!1,delete l.startTime,l.initialized=!1,l.initialize()&&(cancelAnimationFrame(l.rAF),l.printValue(l.startVal))},l.update=function(a){if(l.initialize()){if(a=Number(a),!s(a))return void(l.error="[CountUp] update() - new endVal is not a number: "+a);l.error="",a!==l.frameVal&&(cancelAnimationFrame(l.rAF),l.paused=!1,delete l.startTime,l.startVal=l.frameVal,l.endVal=a,l.countDown=l.startVal>l.endVal,l.rAF=requestAnimationFrame(l.count))}},l.initialize()&&l.printValue(l.startVal)};return e});
\ No newline at end of file
diff --git a/index.html b/index.html
index 6087431..149d7e7 100644
--- a/index.html
+++ b/index.html
@@ -11,13 +11,10 @@
 	<title>CountUp.js</title>
 
 	<link rel="stylesheet" type="text/css" href="../inorganik.github.io/assets/css/style.css?v=20140820">
-	<!--<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.5/angular.min.js"></script>-->
 	<script src="countUp.js"></script>
-	<!--<script type="text/javascript" src="angular-countUp.js"></script>-->
+	<script src="demo.js"></script>
 	<script>
 
-	// var app = angular.module("demoApp",["countUpModule"]);
-
 	(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
 	(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
 	m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
@@ -158,247 +155,4 @@ <h4 class="inlineLeft noMargin weight300">Custom:</h4>
 	</div>
 
 </body>
-<script type="text/javascript">
-
-	// set CountUp options
-	// you don't need to do this - you can use the default options
-	var demo, options, code, data, stars, easingFunctions,
-		useOnComplete = false,
-		useEasing = true,
-		easingFn = null,
-		useGrouping = true,
-		easingFnsDropdown = document.getElementById('easingFnsDropdown'),
-		errorSection = document.getElementById('errorSection');
-
-	window.onload = function() {
-		// in case we're testing angular
-		if (typeof angular !== 'undefined') return;
-		// setup CountUp object
-		demo = new CountUp('myTargetElement', 0, 94.62, 2, 2.5, options);
-		// you could do demo.start() right here but we are getting actual current star count from github api below
-		// since it is an asynchronous call, we fire start() in the success fn of the XMLHttpRequest object
-		getStars.send();
-
-		// display version
-		document.getElementById('version').innerHTML = 'v'+demo.version();
-	};
-
-	easingFunctions = {
-		easeOutExpo: function(t, b, c, d) {
-			return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;
-		},
-		outQuintic: function(t, b, c, d) {
-			var ts = (t /= d) * t;
-			var tc = ts * t;
-			return b + c * (tc * ts + -5 * ts * ts + 10 * tc + -10 * ts + 5 * t);
-		},
-		outCubic: function(t, b, c, d) {
-			var ts = (t /= d) * t;
-			var tc = ts * t;
-			return b + c * (tc + -3 * ts + 3 * t);
-		}
-	};
-
-	// for demo:
-	function swapValues() {
-		var oldStartVal = document.getElementById('startVal').value;
-		var oldEndVal = document.getElementById('endVal').value;
-		document.getElementById('startVal').value = oldEndVal;
-		document.getElementById('endVal').value = oldStartVal;
-		updateCodeVisualizer();
-	}
-	function getEasingFn() {
-		var fn = easingFnsDropdown.value;
-		if (fn === 'easeOutExpo') return null;
-		if (typeof easingFunctions[fn] === 'undefined') return undefined;
-
-		return easingFunctions[fn];
-	}
-	function getEasingFnBody(fn) {
-		fn = typeof fn === 'undefined' ? getEasingFn() : fn;
-
-		if (typeof fn === 'undefined') return 'undefined function';
-
-		if (fn !== null) {
-			return fn.toString().replace(/^ {8}/gm, '');
-		}
-
-		return '';
-	}
-	function getNumerals() {
-		var numeralsCode = document.getElementById('numeralsDropdown').value;
-		// optionally provide alternates for 0-9
-		switch (numeralsCode) {
-			case 'ea': // Eastern Arabic
-				return ['٠','١','٢','٣','٤','٥','٦','٧','٨','٩'];
-			case 'fa': // Farsi
-				return ['۰','۱','۲','۳','۴','۵','۶','۷','۸','۹'];
-			default:
-				return []
-		}
-	}
-	function stringifyArray(arr) {
-		return '[\'' + arr.join('\', \'') + '\']';
-
-	}
-	function createCountUp() {
-
-		var startVal = document.getElementById('startVal').value;
-		var endVal = document.getElementById('endVal').value;
-		var decimals = document.getElementById('decimals').value,
-			duration = document.getElementById('duration').value,
-			prefix = document.getElementById('prefix').value,
-			suffix = document.getElementById('suffix').value,
-			easingFn = getEasingFn();
-
-		options = {
-			useEasing: useEasing,
-			easingFn: typeof easingFn === 'undefined' ? null : easingFn,
-			useGrouping: useGrouping,
-			separator: document.getElementById('separator').value,
-			decimal: document.getElementById('decimal').value,
-			numerals: getNumerals()
-		};
-		if (prefix.length) options.prefix = prefix;
-		if (suffix.length) options.suffix = suffix;
-
-		// you don't have to create a new instance of CountUp every time you start an animation,
-		// you can just change the properties individually. But I do here in case user changes values in demo.
-		demo = new CountUp('myTargetElement', startVal, endVal, decimals, duration, options);
-		if (!demo.error) {
-			errorSection.style.display = 'none';
-			if (useOnComplete) {
-				demo.start(methodToCallOnComplete);
-			} else {
-				demo.start();
-			}
-			updateCodeVisualizer();
-		}
-		else {
-			errorSection.style.display = 'block';
-			document.getElementById('error').innerHTML = demo.error;
-			console.error(demo.error);
-		}
-	}
-	function showCodeAndPauseResume() {
-		code = 'demo.pauseResume();';
-		document.getElementById('codeVisualizer').innerHTML = code;
-		demo.pauseResume();
-	}
-	function showCodeAndReset() {
-		code = 'demo.reset();';
-		document.getElementById('codeVisualizer').innerHTML = code;
-		demo.reset();
-	}
-	function showCodeAndUpdate() {
-		var updateVal = document.getElementById('updateVal').value;
-		var num = updateVal ? updateVal : 0;
-		demo.update(num);
-	}
-	function toggleOnComplete(checkbox) {
-		useOnComplete = checkbox.checked;
-		updateCodeVisualizer();
-	}
-	function toggleEasing(checkbox) {
-		useEasing = checkbox.checked
-		easingFnsDropdown.disabled = !useEasing
-		if (useEasing) {
-			easingFnsDropdown.value = 'easeOutExpo';
-			document.getElementById('easingFnPreview').value = "";
-		} 
-		updateCodeVisualizer();
-	}
-	function toggleGrouping(checkbox) {
-		useGrouping = checkbox.checked;
-		updateCodeVisualizer();
-	}
-	function methodToCallOnComplete() {
-		console.log('COMPLETE!');
-		alert('COMPLETE!');
-	}
-	function updateCodeVisualizer() {
-		var startVal = document.getElementById('startVal').value;
-		startVal = Number(startVal.replace(',','').replace(' ',''));
-		var endVal = document.getElementById('endVal').value;
-		endVal = Number(endVal.replace(',','').replace(' ',''));
-		var decimals = document.getElementById('decimals').value,
-			duration = document.getElementById('duration').value,
-			separator = document.getElementById('separator').value,
-			decimal = document.getElementById('decimal').value,
-			prefix = document.getElementById('prefix').value,
-			suffix = document.getElementById('suffix').value,
-			easingFn = getEasingFn(),
-			easingFnBody = getEasingFnBody(easingFn),
-			numerals = getNumerals(),
-			code = '';
-
-		if (useEasing && easingFn) {
-			code += 'var easingFn = ';
-			var split = easingFnBody.split('\n');
-
-			for (var line in split) {
-				code += split[line].replace(' ', '&nbsp;') + '<br>';
-			}
-		}
-
-		code += 'var options = {<br>';
-		code += (useEasing) ? '&emsp;&emsp;useEasing: true, <br>' : '&emsp;&emsp;useEasing: false, <br>';
-		code += (easingFn && useEasing) ? '&emsp;&emsp;easingFn: easingFn, <br>' : '';
-		code += (useGrouping) ? '&emsp;&emsp;useGrouping: true, <br>' : '&emsp;&emsp;useGrouping: false, <br>';
-		code += '&emsp;&emsp;separator: \''+separator+'\', <br>';
-		code += '&emsp;&emsp;decimal: \''+decimal+'\', <br>';
-		if (prefix.length) code += '&emsp;&emsp;prefix: \''+prefix+'\', <br>';
-		if (suffix.length) code += '&emsp;&emsp;suffix: \''+suffix+'\' <br>';
-		if (numerals.length) code += '&emsp;&emsp;numerals: '+stringifyArray(numerals)+' <br>';
-		code += '};<br>';
-		code += 'var demo = new CountUp(\'myTargetElement\', '+startVal+', '+endVal+', '+decimals+', '+duration+', options);<br>';
-		code += 'if (!demo.error) {<br>';
-		if (useOnComplete) {
-			code += '&emsp;&emsp;demo.start(methodToCallOnComplete);<br>';
-		} else {
-			code += '&emsp;&emsp;demo.start();<br>';
-		}
-		code += '} else {<br>';
-		code += '&emsp;&emsp;console.error(demo.error);<br>}';
-		document.getElementById('codeVisualizer').innerHTML = code;
-	}
-	function updateCodeVisualizerForUpdate() {
-		var updateVal = document.getElementById('updateVal').value;
-		var num = updateVal ? updateVal : 0;
-		code = 'demo.update(' + updateVal + ');';
-		document.getElementById('codeVisualizer').innerHTML = code;
-	}
-
-	// get current star count
-	var repoInfoUrl = 'https://api.github.com/repos/inorganik/CountUp.js';
-	var getStars = new XMLHttpRequest();
-	getStars.open('GET', repoInfoUrl, true);
-	getStars.timeout = 5000;
-
-	getStars.onreadystatechange = function() {
-		// 2: received headers,  3: loading, 4: done
-		if (getStars.readyState == 4) {
-			if (getStars.status == 200) {
-				if (getStars.responseText !== 'undefined') {
-					if (getStars.responseText.length > 0) {
-						data = JSON.parse(getStars.responseText);
-						stars = data.stargazers_count;
-						// change input values
-						document.getElementById('startVal').value = 0;
-						document.getElementById('endVal').value = stars;
-						document.getElementById('decimals').value = 0;
-						
-						createCountUp();
-					}
-				}
-			}
-		}
-	};
-	getStars.onerror = function() {
-		console.error('error getting stars:', getStars.status);
-		stars = getStars.status;
-		demo.start();
-	};
-
-	</script>
 </html>
diff --git a/package.json b/package.json
index 10612a0..79c8411 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
 	"name": "countup.js",
 	"description": "Animates a numerical value by counting to it",
-	"version": "1.9.1",
+	"version": "1.9.2",
 	"license": "MIT",
 	"main": "./dist/countUp.min.js",
 	"repository": {

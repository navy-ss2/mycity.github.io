From e789bbc5b565f301f739874af4a0210665f70426 Mon Sep 17 00:00:00 2001
From: Jamie Perkins <jamie.perkins@gmail.com>
Date: Wed, 23 Aug 2017 17:00:44 -0600
Subject: [PATCH] moving angular 1 and 2 modules out of this repo and into
 their own repos

---
 .gitignore                  |   1 +
 README.md                   | 119 ++++----------------------------------
 angular-countUp.js          | 136 --------------------------------------------
 bower.json                  |   2 +-
 countUp.module.ts           | 130 ------------------------------------------
 dist/angular-countUp.js     | 136 --------------------------------------------
 dist/angular-countUp.min.js |   1 -
 dist/countUp.module.d.ts    |  19 -------
 dist/countUp.module.js      | 133 -------------------------------------------
 gulpfile.js                 |  14 -----
 index.d.ts                  |  44 --------------
 package.json                |   6 --
 12 files changed, 14 insertions(+), 727 deletions(-)
 delete mode 100644 angular-countUp.js
 delete mode 100644 countUp.module.ts
 delete mode 100644 dist/angular-countUp.js
 delete mode 100644 dist/angular-countUp.min.js
 delete mode 100644 dist/countUp.module.d.ts
 delete mode 100644 dist/countUp.module.js
 delete mode 100644 index.d.ts

diff --git a/.gitignore b/.gitignore
index 2c49721..9dc3404 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,4 @@ npm-debug.log
 .idea
 .DS_Store
 tasks.json
+.vscode
\ No newline at end of file
diff --git a/README.md b/README.md
index 269374a..29a870e 100644
--- a/README.md
+++ b/README.md
@@ -7,28 +7,25 @@ CountUp.js supports all browsers.
 
 ## [Try the demo](http://inorganik.github.io/countUp.js)
 
-## Installation
+## Please note
 
-Simply include the countUp.js file in your project or install via npm or bower using the package name `countup.js` or `countUp.js` respectively.
+_Angular 1 and 2 modules used to be part of this repo_. **As of v1.9.0, they have moved.** See links below. 
 
-Before making a pull request, please [read this](#contributing). MIT License.
+## See Also
 
-## Angular directive
-If you are using Angular, you can use the included Angular module. Use the count-up attribute to quickly create an animation. It also integrates nicely with the Angular-scroll-spy directive. The Angular directive only requires an `end-val` attribute, but will also accept `start-val`, `duration`, `decimals`, and `options`. `id` is not needed. You must include both countUp.js and the module to use the Angular directive. **[Check out the angular demo](http://inorganik.github.io/angular-scroll-spy/)** and see usage examples below.
+- **[CountUp.js Angular 1.x Module](https://github.com/inorganik/countUp.js-angular1)**
+- **[CountUp.js Angular ^2 Module](https://github.com/inorganik/countUp.js-angular2)**
+- **[CountUp.js React](https://github.com/glennreyes/react-countup)**
+- **[CountUp.js WordPress Plugin](https://wordpress.org/plugins/countup-js/)**
+
+## Installation
 
-## Angular 2 directive
-An identical Angular 2 version of the directive compatible with version ^2.0.0 is also provided.
-Simply import the module from `dist/` into your application module's `imports` array. See example below.
+Simply include the countUp.js file in your project or install via npm or bower using the package name `countup.js` or `countUp.js` respectively.
 
-## React component
-If you are using React, there is a React component wrapper [`react-countup`](https://github.com/glennreyes/react-countup) that can be used right out of the box and takes all the complexity for you. It supports all common options and features including `easing`, `separator`, `decimals`, callbacks `onStart` and `onComplete`. **[Check out the React demo](https://glennreyes.github.io/react-countup)** and see usage examples below.
+Before making a pull request, please [read this](#contributing). MIT License.
 
-## jQuery
 A jQuery version is also included in case you like dollar signs.
 
-## WordPress plugin
-Add CountUp to your WordPress site with this plugin: [https://wordpress.org/plugins/countup-js/](https://wordpress.org/plugins/countup-js/)
-
 ## Usage:
 Params:
 - `target` = id of html element, input, svg text element, or var of previously selected element/input where counting occurs
@@ -90,103 +87,11 @@ numAnim.start(function() {
 });
 ```
 
-#### Angular
-*If you are using Angular*, (not required), create your animation like the examples below. Make sure you include both countUp.js and angular-countUp.js, and inject the `countUpModule`.
-
-```html
-<h2 count-up end-val="873.4"></h2>
-```
-With [angular-scroll-spy](http://inorganik.github.io/angular-scroll-spy/):
-```html
-<h2 count-up id="numberAnimation" end-val="873.4" scroll-spy-event="elementFirstScrolledIntoView" scroll-spy></h2>
-```
-
-#### Angular 2
-
-The directive is compatible with Angular version ^2.0.0. Make sure `countUp.js` is loaded as a global dependency during bootstrapping.
-
-Note the value for the `options` parameter is passed directly to the directive attribute selector.
-
-```ts
-import {Component, NgModule} from '@angular/core';
-
-import {CountUpModule} from 'countup.js/dist/countUp.module';
-
-@NgModule({
-   imports: [CountUpModule],
-   bootstrap: [AppComponent]
-})
-export class AppModule {}
-
-// ...
-// ...
-// Use in some component contained within the importing module...
-
-@Component({
-   selector: 'counting-header',
-   template: `
-        <h1 countUp="{useEasing: false}"
-            [startVal]="myStartVal"
-            [endVal]="myEndVal"
-            [reanimateOnClick]="false"></h1>
-   `
-})
-export class CountingHeaderComponent {
-    @Input()
-    myStartVal: number;
-
-    @Input()
-    myEndVal: number;
-}
-```
-
-#### React
-*If you are using React*, (not required) with [`react-countup`](https://github.com/glennreyes/react-countup), just simply do:
-
-```js
-import CountUp from 'react-countup';
-
-render(
-  <CountUp start={0} end={160526} />,
-  document.getElementById('root')
-);
-```
-
-Your CountUp component will start to count up right after the component has been mounted.
-
-#### Custom easing:
-
-You can optionally apply your custom easing function, which will receive 4 parameters necessary to calculate a Bezier curve:
-
-- `t` (the current time);
-- `b` (the beginning value);
-- `c` (the difference between the beginning and destination value);
-- `d` (the total time of the tween).
-
-You could use any of Robert Penner's [easing functions](https://github.com/danro/jquery-easing/blob/master/jquery.easing.js). Just avoid using "bouncy" functions, because they cause counting in both directions
-
-If you don't specify a custom easing function, CountUp uses the default `easeOutExpo`.
-
-Example:
-
-```js
-var easeOutCubic = function(t, b, c, d) {
-    var ts = (t /= d) * t;
-    var tc = ts * t;
-    return b + c * (1.77635683940025e-15 * tc * ts + 0.999999999999998 * tc + -3 * ts + 3 * t);
-};
-var options = {
-  easingFn: easeOutCubic
-};
-var demo = new CountUp("myTargetElement", 24.02, 94.62, 2, 2.5, options);
-demo.start();
-```
-
 ## Contributing <a name="contributing"></a>
 
 Before you make a pull request, please be sure to follow these super simple instructions:
 
-1. Do your work on the `countUp.js` and/or other files in the root directory.
+1. Do your work on `countUp.js` and/or other files in the root directory.
 2. In Terminal, `cd` to the `countUp.js` directory.
 3. Run `npm install`, which installs gulp and its dependencies.
 4. Run `gulp`, which copies and minifies the .js files to the `dist` folder.
diff --git a/angular-countUp.js b/angular-countUp.js
deleted file mode 100644
index f0e55bb..0000000
--- a/angular-countUp.js
+++ /dev/null
@@ -1,136 +0,0 @@
-(function (angular) {
-
-    // Count-Up directive
-    // --------------------------------------------
-    //
-    // * **Class:** CountUp
-    // * **Author:** Jamie Perkins
-    //
-    // Creates a counting animation for numbers
-    // REQUIRED attributes: 
-    // - endVal
-    //
-    // DEPENDENCY: countUp.js
-
-    'use strict';
-
-    var module = angular.module('countUpModule', []);
-
-    /**
-     * count-up attribute directive
-     * 
-     * @param {number} startVal - (optional) The value you want to begin at, default 0
-     * @param {number} countUp - The value you want to arrive at
-     * @param {number} duration - (optional) Duration in seconds, default 2.
-     * @param {number} decimals - (optional) Number of decimal places in number, default 0
-     * @param {boolean} reanimateOnClick - (optional) Config if reanimate on click event, default true.
-     * @param {string} filter - (optional) Filter expression to apply to animated values
-     * @param {object} options - (optional) Provides for extra configuration, such as easing.
-     */
-    module.directive('countUp', [ '$filter', function($filter) {
-
-        return {
-            restrict: 'A',
-            scope: {
-                startVal: '=?',
-                endVal: '=?',
-                duration: '=?',
-                decimals: '=?',
-                reanimateOnClick: '=?',
-                filter: '@',
-                options: '=?'
-            },
-            link: function ($scope, $el, $attrs) {
-
-                var options = {};
-
-                if ($scope.filter) {
-                    var filterFunction = createFilterFunction();
-                    options.formattingFn = filterFunction;
-                }
-
-                if ($scope.options) {
-                    angular.extend(options, $scope.options);
-                }
-
-                var countUp = createCountUp($scope.startVal, $scope.endVal, $scope.decimals, $scope.duration);
-
-                function createFilterFunction() {
-                    var filterParams = $scope.filter.split(':');
-                    var filterName = filterParams.shift();
-
-                    return function(value) {
-                        var filterCallParams = [value];
-                        Array.prototype.push.apply(filterCallParams, filterParams);
-                        value = $filter(filterName).apply(null, filterCallParams);
-                        return value;
-                    };
-                }
-
-                function createCountUp(sta, end, dec, dur) {
-                    sta = sta || 0;
-                    if (isNaN(sta)) sta = Number(sta.match(/[\d\-\.]+/g).join('')); // strip non-numerical characters
-                    end = end || 0;
-                    if (isNaN(end)) end = Number(end.match(/[\d\-\.]+/g).join('')); // strip non-numerical characters
-                    dur = Number(dur) || 2;
-                    dec = Number(dec) || 0;
-
-                    // construct countUp 
-                    var countUp = new CountUp($el[0], sta, end, dec, dur, options);
-                    if (end > 999) {
-                        // make easing smoother for large numbers
-                        countUp = new CountUp($el[0], sta, end - 100, dec, dur / 2, options);
-                    }
-
-                    return countUp;
-                }
-
-                function animate() {
-                    countUp.reset();
-                    if ($scope.endVal > 999) {
-                        countUp.start(function() {
-                            countUp.update($scope.endVal);
-                        });
-                    }
-                    else {
-                        countUp.start();
-                    }
-                }
-
-                // fire on scroll-spy event, or right away
-                if ($attrs.scrollSpyEvent) {
-                    // listen for scroll spy event
-                    $scope.$on($attrs.scrollSpyEvent, function (event, data) {
-                        if (data === $attrs.id) {
-                            animate();
-                        }
-                    });
-                }
-                else {
-                    animate();
-                }
-
-                // re-animate on click
-                var reanimateOnClick = angular.isDefined($scope.reanimateOnClick) ? $scope.reanimateOnClick : true;
-                if (reanimateOnClick) {
-                    $el.on('click', function() {
-                        animate();
-                    });
-                }
-
-                $scope.$watch('endVal', function (newValue, oldValue) {
-                    if (newValue === null || newValue === oldValue) {
-                        return;
-                    }
-
-                    if (countUp !== null) {
-                        countUp.update($scope.endVal);
-                    } else {
-                        countUp = createCountUp($scope.startVal, $scope.endVal, $scope.decimals, $scope.duration);
-                        animate();
-                    }
-                });
-            }
-        };
-    }]);
-})(angular);
\ No newline at end of file
diff --git a/bower.json b/bower.json
index 6d149eb..462ce2e 100644
--- a/bower.json
+++ b/bower.json
@@ -1,6 +1,6 @@
 {
     "name": "countUp.js",
-    "main": ["dist/countUp.min.js", "dist/angular-countUp.js"],
+    "main": ["dist/countUp.min.js"],
     "author": "Jamie Perkins",
     "ignore": [
         "LICENSE.md",
diff --git a/countUp.module.ts b/countUp.module.ts
deleted file mode 100644
index b6da921..0000000
--- a/countUp.module.ts
+++ /dev/null
@@ -1,130 +0,0 @@
-import {
-   Directive,
-   ElementRef,
-   Input,
-   HostListener,
-   Inject,
-   OnInit,
-   NgModule
-} from '@angular/core';
-
-declare var CountUp;
-
-/**
- * Animates the inner text of the element to count up to endVal.
- */
-@Directive({
-   selector: '[countUp]'
-})
-export class CountUpDirective implements OnInit {
-
-    /**
-     * Optional extra configuration, such as easing.
-     */
-    @Input('countUp')
-    options: any;
-
-    /**
-     * Optional start value for the count. Defaults to zero.
-     */
-    @Input()
-    startVal: number;
-
-    /**
-     * The value to count up to.
-     */
-    private _endVal: number;
-    @Input()
-    get endVal(): number {
-        return this._endVal;
-    }
-
-    set endVal(value: number) {
-        this._endVal = value;
-
-        if (isNaN(value)) {
-            return;
-        }
-
-        if (!this._countUp) {
-            return;
-        }
-
-        this._countUp.update(value);
-    }
-
-    /**
-     * Optional duration of the animation. Default is two seconds.
-     */
-    @Input()
-    duration: number;
-
-    /**
-     * Optional number of decimal places. Default is two.
-     */
-    @Input()
-    decimals: number;
-
-    /**
-     * Optional flag for specifying whether the element should re-animate when clicked.
-     * Default is true.
-     */
-    @Input()
-    reanimateOnClick: boolean;
-
-    ngOnInit() {
-        this._countUp = this.createCountUp(
-                this.startVal, this.endVal, this.decimals, this.duration);
-        this.animate();
-    }
-
-   /**
-    * Re-animate if preference is set.
-    */
-   @HostListener('click')
-   onClick() {
-       if (this.reanimateOnClick) {
-           this.animate();
-       }
-   }
-
-   private _countUp;
-
-   constructor(@Inject(ElementRef) private el: ElementRef) {}
-
-    private createCountUp(sta, end, dec, dur) {
-        sta = sta || 0;
-        if (isNaN(sta)) sta = Number(sta.match(/[\d\-\.]+/g).join('')); // strip non-numerical characters
-        end = end || 0;
-        if (isNaN(end)) end = Number(end.match(/[\d\-\.]+/g).join('')); // strip non-numerical characters
-        dur = Number(dur) || 2;
-        dec = Number(dec) || 0;
-
-        // construct countUp
-        let countUp = new CountUp(this.el.nativeElement, sta, end, dec, dur, this.options);
-        if (end > 999) {
-            // make easing smoother for large numbers
-            countUp = new CountUp(this.el.nativeElement, sta, end - 100, dec, dur / 2, this.options);
-        }
-
-        return countUp;
-    }
-
-    private animate() {
-        this._countUp.reset();
-        if (this.endVal > 999) {
-            this._countUp.start(() => this._countUp.update(this.endVal));
-        } else {
-            this._countUp.start();
-        }
-    }
-}
-
-/**
- * Module providing the countUp directive.
- */
-@NgModule({
-   declarations: [CountUpDirective],
-   exports: [CountUpDirective]
-})
-export class CountUpModule {}
diff --git a/dist/angular-countUp.js b/dist/angular-countUp.js
deleted file mode 100644
index f0e55bb..0000000
--- a/dist/angular-countUp.js
+++ /dev/null
@@ -1,136 +0,0 @@
-(function (angular) {
-
-    // Count-Up directive
-    // --------------------------------------------
-    //
-    // * **Class:** CountUp
-    // * **Author:** Jamie Perkins
-    //
-    // Creates a counting animation for numbers
-    // REQUIRED attributes: 
-    // - endVal
-    //
-    // DEPENDENCY: countUp.js
-
-    'use strict';
-
-    var module = angular.module('countUpModule', []);
-
-    /**
-     * count-up attribute directive
-     * 
-     * @param {number} startVal - (optional) The value you want to begin at, default 0
-     * @param {number} countUp - The value you want to arrive at
-     * @param {number} duration - (optional) Duration in seconds, default 2.
-     * @param {number} decimals - (optional) Number of decimal places in number, default 0
-     * @param {boolean} reanimateOnClick - (optional) Config if reanimate on click event, default true.
-     * @param {string} filter - (optional) Filter expression to apply to animated values
-     * @param {object} options - (optional) Provides for extra configuration, such as easing.
-     */
-    module.directive('countUp', [ '$filter', function($filter) {
-
-        return {
-            restrict: 'A',
-            scope: {
-                startVal: '=?',
-                endVal: '=?',
-                duration: '=?',
-                decimals: '=?',
-                reanimateOnClick: '=?',
-                filter: '@',
-                options: '=?'
-            },
-            link: function ($scope, $el, $attrs) {
-
-                var options = {};
-
-                if ($scope.filter) {
-                    var filterFunction = createFilterFunction();
-                    options.formattingFn = filterFunction;
-                }
-
-                if ($scope.options) {
-                    angular.extend(options, $scope.options);
-                }
-
-                var countUp = createCountUp($scope.startVal, $scope.endVal, $scope.decimals, $scope.duration);
-
-                function createFilterFunction() {
-                    var filterParams = $scope.filter.split(':');
-                    var filterName = filterParams.shift();
-
-                    return function(value) {
-                        var filterCallParams = [value];
-                        Array.prototype.push.apply(filterCallParams, filterParams);
-                        value = $filter(filterName).apply(null, filterCallParams);
-                        return value;
-                    };
-                }
-
-                function createCountUp(sta, end, dec, dur) {
-                    sta = sta || 0;
-                    if (isNaN(sta)) sta = Number(sta.match(/[\d\-\.]+/g).join('')); // strip non-numerical characters
-                    end = end || 0;
-                    if (isNaN(end)) end = Number(end.match(/[\d\-\.]+/g).join('')); // strip non-numerical characters
-                    dur = Number(dur) || 2;
-                    dec = Number(dec) || 0;
-
-                    // construct countUp 
-                    var countUp = new CountUp($el[0], sta, end, dec, dur, options);
-                    if (end > 999) {
-                        // make easing smoother for large numbers
-                        countUp = new CountUp($el[0], sta, end - 100, dec, dur / 2, options);
-                    }
-
-                    return countUp;
-                }
-
-                function animate() {
-                    countUp.reset();
-                    if ($scope.endVal > 999) {
-                        countUp.start(function() {
-                            countUp.update($scope.endVal);
-                        });
-                    }
-                    else {
-                        countUp.start();
-                    }
-                }
-
-                // fire on scroll-spy event, or right away
-                if ($attrs.scrollSpyEvent) {
-                    // listen for scroll spy event
-                    $scope.$on($attrs.scrollSpyEvent, function (event, data) {
-                        if (data === $attrs.id) {
-                            animate();
-                        }
-                    });
-                }
-                else {
-                    animate();
-                }
-
-                // re-animate on click
-                var reanimateOnClick = angular.isDefined($scope.reanimateOnClick) ? $scope.reanimateOnClick : true;
-                if (reanimateOnClick) {
-                    $el.on('click', function() {
-                        animate();
-                    });
-                }
-
-                $scope.$watch('endVal', function (newValue, oldValue) {
-                    if (newValue === null || newValue === oldValue) {
-                        return;
-                    }
-
-                    if (countUp !== null) {
-                        countUp.update($scope.endVal);
-                    } else {
-                        countUp = createCountUp($scope.startVal, $scope.endVal, $scope.decimals, $scope.duration);
-                        animate();
-                    }
-                });
-            }
-        };
-    }]);
-})(angular);
\ No newline at end of file
diff --git a/dist/angular-countUp.min.js b/dist/angular-countUp.min.js
deleted file mode 100644
index 8b02a25..0000000
--- a/dist/angular-countUp.min.js
+++ /dev/null
@@ -1 +0,0 @@
-!function(n){"use strict";var t=n.module("countUpModule",[]);t.directive("countUp",["$filter",function(t){return{restrict:"A",scope:{startVal:"=?",endVal:"=?",duration:"=?",decimals:"=?",reanimateOnClick:"=?",filter:"@",options:"=?"},link:function(a,e,i){function r(){var n=a.filter.split(":"),e=n.shift();return function(a){var i=[a];return Array.prototype.push.apply(i,n),a=t(e).apply(null,i)}}function l(n,t,a,i){n=n||0,isNaN(n)&&(n=Number(n.match(/[\d\-\.]+/g).join(""))),t=t||0,isNaN(t)&&(t=Number(t.match(/[\d\-\.]+/g).join(""))),i=Number(i)||2,a=Number(a)||0;var r=new CountUp(e[0],n,t,a,i,u);return t>999&&(r=new CountUp(e[0],n,t-100,a,i/2,u)),r}function o(){s.reset(),a.endVal>999?s.start(function(){s.update(a.endVal)}):s.start()}var u={};if(a.filter){var c=r();u.formattingFn=c}a.options&&n.extend(u,a.options);var s=l(a.startVal,a.endVal,a.decimals,a.duration);i.scrollSpyEvent?a.$on(i.scrollSpyEvent,function(n,t){t===i.id&&o()}):o();var d=!n.isDefined(a.reanimateOnClick)||a.reanimateOnClick;d&&e.on("click",function(){o()}),a.$watch("endVal",function(n,t){null!==n&&n!==t&&(null!==s?s.update(a.endVal):(s=l(a.startVal,a.endVal,a.decimals,a.duration),o()))})}}}])}(angular);
\ No newline at end of file
diff --git a/dist/countUp.module.d.ts b/dist/countUp.module.d.ts
deleted file mode 100644
index 5c3e559..0000000
--- a/dist/countUp.module.d.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { ElementRef, OnInit } from '@angular/core';
-export declare class CountUpDirective implements OnInit {
-    private el;
-    options: any;
-    startVal: number;
-    private _endVal;
-    endVal: number;
-    duration: number;
-    decimals: number;
-    reanimateOnClick: boolean;
-    ngOnInit(): void;
-    onClick(): void;
-    private _countUp;
-    constructor(el: ElementRef);
-    private createCountUp(sta, end, dec, dur);
-    private animate();
-}
-export declare class CountUpModule {
-}
diff --git a/dist/countUp.module.js b/dist/countUp.module.js
deleted file mode 100644
index 2a9b2f4..0000000
--- a/dist/countUp.module.js
+++ /dev/null
@@ -1,133 +0,0 @@
-var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
-    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
-    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
-    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
-    return c > 3 && r && Object.defineProperty(target, key, r), r;
-};
-var __metadata = (this && this.__metadata) || function (k, v) {
-    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
-};
-var __param = (this && this.__param) || function (paramIndex, decorator) {
-    return function (target, key) { decorator(target, key, paramIndex); }
-};
-(function (factory) {
-    if (typeof module === "object" && typeof module.exports === "object") {
-        var v = factory(require, exports);
-        if (v !== undefined) module.exports = v;
-    }
-    else if (typeof define === "function" && define.amd) {
-        define(["require", "exports", "@angular/core"], factory);
-    }
-})(function (require, exports) {
-    "use strict";
-    Object.defineProperty(exports, "__esModule", { value: true });
-    var core_1 = require("@angular/core");
-    var CountUpDirective = (function () {
-        function CountUpDirective(el) {
-            this.el = el;
-        }
-        Object.defineProperty(CountUpDirective.prototype, "endVal", {
-            get: function () {
-                return this._endVal;
-            },
-            set: function (value) {
-                this._endVal = value;
-                if (isNaN(value)) {
-                    return;
-                }
-                if (!this._countUp) {
-                    return;
-                }
-                this._countUp.update(value);
-            },
-            enumerable: true,
-            configurable: true
-        });
-        CountUpDirective.prototype.ngOnInit = function () {
-            this._countUp = this.createCountUp(this.startVal, this.endVal, this.decimals, this.duration);
-            this.animate();
-        };
-        CountUpDirective.prototype.onClick = function () {
-            if (this.reanimateOnClick) {
-                this.animate();
-            }
-        };
-        CountUpDirective.prototype.createCountUp = function (sta, end, dec, dur) {
-            sta = sta || 0;
-            if (isNaN(sta))
-                sta = Number(sta.match(/[\d\-\.]+/g).join(''));
-            end = end || 0;
-            if (isNaN(end))
-                end = Number(end.match(/[\d\-\.]+/g).join(''));
-            dur = Number(dur) || 2;
-            dec = Number(dec) || 0;
-            var countUp = new CountUp(this.el.nativeElement, sta, end, dec, dur, this.options);
-            if (end > 999) {
-                countUp = new CountUp(this.el.nativeElement, sta, end - 100, dec, dur / 2, this.options);
-            }
-            return countUp;
-        };
-        CountUpDirective.prototype.animate = function () {
-            var _this = this;
-            this._countUp.reset();
-            if (this.endVal > 999) {
-                this._countUp.start(function () { return _this._countUp.update(_this.endVal); });
-            }
-            else {
-                this._countUp.start();
-            }
-        };
-        return CountUpDirective;
-    }());
-    __decorate([
-        core_1.Input('countUp'),
-        __metadata("design:type", Object)
-    ], CountUpDirective.prototype, "options", void 0);
-    __decorate([
-        core_1.Input(),
-        __metadata("design:type", Number)
-    ], CountUpDirective.prototype, "startVal", void 0);
-    __decorate([
-        core_1.Input(),
-        __metadata("design:type", Number),
-        __metadata("design:paramtypes", [Number])
-    ], CountUpDirective.prototype, "endVal", null);
-    __decorate([
-        core_1.Input(),
-        __metadata("design:type", Number)
-    ], CountUpDirective.prototype, "duration", void 0);
-    __decorate([
-        core_1.Input(),
-        __metadata("design:type", Number)
-    ], CountUpDirective.prototype, "decimals", void 0);
-    __decorate([
-        core_1.Input(),
-        __metadata("design:type", Boolean)
-    ], CountUpDirective.prototype, "reanimateOnClick", void 0);
-    __decorate([
-        core_1.HostListener('click'),
-        __metadata("design:type", Function),
-        __metadata("design:paramtypes", []),
-        __metadata("design:returntype", void 0)
-    ], CountUpDirective.prototype, "onClick", null);
-    CountUpDirective = __decorate([
-        core_1.Directive({
-            selector: '[countUp]'
-        }),
-        __param(0, core_1.Inject(core_1.ElementRef)),
-        __metadata("design:paramtypes", [core_1.ElementRef])
-    ], CountUpDirective);
-    exports.CountUpDirective = CountUpDirective;
-    var CountUpModule = (function () {
-        function CountUpModule() {
-        }
-        return CountUpModule;
-    }());
-    CountUpModule = __decorate([
-        core_1.NgModule({
-            declarations: [CountUpDirective],
-            exports: [CountUpDirective]
-        })
-    ], CountUpModule);
-    exports.CountUpModule = CountUpModule;
-});
diff --git a/gulpfile.js b/gulpfile.js
index 32753e0..d233c58 100644
--- a/gulpfile.js
+++ b/gulpfile.js
@@ -3,8 +3,6 @@ var wrap = require('gulp-wrap-umd');
 var uglify = require('gulp-uglify');
 var rename = require('gulp-rename');
 var del = require('del');
-var ts = require("gulp-typescript");
-var tsProject = ts.createProject("tsconfig.json");
 
 gulp.task('clean', function(cb) {
     del(['dist/*']);
@@ -24,18 +22,6 @@ gulp.task('umd', ['clean'], function(file) {
             suffix: '.min'
         }))
         .pipe(gulp.dest('dist/'));
-    var angularCountup = gulp
-        .src('angular-countUp.js')
-        .pipe(gulp.dest('dist/'))
-        .pipe(uglify())
-        .pipe(rename({
-            suffix: '.min'
-        }))
-        .pipe(gulp.dest('dist/'));
-    var angular2Countup = tsProject
-        .src()
-        .pipe(tsProject())
-        .pipe(gulp.dest('dist/'));
 });
 
 gulp.task('build', ['umd']);
diff --git a/index.d.ts b/index.d.ts
deleted file mode 100644
index 5db1d09..0000000
--- a/index.d.ts
+++ /dev/null
@@ -1,44 +0,0 @@
-declare function CountUp(target: string, startVal: number, endVal: number, decimals: number, duration: number, options: any): void;
-
-declare module CountUp {
-	var options: CountUpOptions;
-	
-	function version(): string;
-
-	function printValue(value: any): void;
-
-	function count(timestamp: any): void;
-
-	// start your animation
-	function start(callback: Function): boolean;
-
-	// toggles pause/resume animation
-	function pauseResume(): void;
-
-	// reset to startVal so animation can be run again
-	function reset(): void;
-
-	// pass a new endVal and start animation
-	function update(newEndVal: number): void;
-}
-
-interface CountUp {
-	// target = id of html element or var of previously selected html element where counting occurs
-	// startVal = the value you want to begin at
-	// endVal = the value you want to arrive at
-	// decimals = number of decimal places, default 0
-	// duration = duration of animation in seconds, default 2
-	// options = optional object of options (see below)
-	new(target: string, startVal: number, endVal: number, decimals: number, duration: number, options: any): CountUp;
-}
-
-interface CountUpOptions {
-	useEasing: boolean; // toggle easing
-	useGrouping: boolean; // 1,000,000 vs 1000000
-	separator: string; // character to use as a separator
-	decimal: string; // character to use as a decimal
-	easingFn: Function; // optional custom easing closure function, default is Robert Penner's easeOutExpo
-	formattingFn: Function; // optional custom formatting function, default is self.formatNumber below
-}
-
-export = CountUp;
diff --git a/package.json b/package.json
index 61021f4..ec6fcf3 100644
--- a/package.json
+++ b/package.json
@@ -10,17 +10,11 @@
   },
   "dependencies": {},
   "devDependencies": {
-    "@angular/core": "^2.2.3",
-    "@types/core-js": "^0.9.34",
     "del": "~0.1.3",
     "gulp": "~3.8.10",
     "gulp-rename": "~1.2.0",
-    "gulp-typescript": "^3.1.3",
     "gulp-uglify": "^1.4.2",
     "gulp-wrap-umd": "~0.2.1",
-    "rxjs": "^5.0.1",
-    "typescript": "^2.0.10",
-    "zone.js": "^0.7.2"
   },
   "scripts": {
     "build": "gulp",
